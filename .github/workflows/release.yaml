on:
  push:
    tags:
      - 'v*'
jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Release ${{ github.ref }}
          draft: true
          prerelease: false
  build:
    needs: create_release
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goarch: arm64
            goos: windows
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - uses: actions/checkout@v1
      - env:
          GOPROXY: "https://proxy.golang.org"
        run: |
          set -e
          FLAGS=''
          if [ "${{ matrix.goos }}" = "windows" ]; then
            FLAGS='-ldflags -H=windowsgui'
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build $FLAGS ./cmd/coub-archive
      - id: package
        run: |
          set -e
          if [ "${{ matrix.goos }}" = "darwin" ]; then
            ./build/package/package.sh
            zip coub-archive.zip coub-archive.app
            echo ::set-output name=filename::coub-archive.zip
            echo ::set-output name=content_type::application/zip
          elif [ "${{ matrix.goos }}" = "windows" ]; then
            echo ::set-output name=filename::coub-archive.exe
            echo ::set-output name=content_type::application/vnd.microsoft.portable-executable
          elif [ "${{ matrix.goos }}" = "linux" ]; then
            echo ::set-output name=filename::coub-archive
            echo ::set-output name=content_type::application/x-executable
          fi
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.package.outputs.filename }}
          asset_name: ${{ steps.package.outputs.filename }}-{{ matrix.goos }}-{{ matrix.goarach }}
          asset_content_type: ${{ steps.package.outputs.content_type }}